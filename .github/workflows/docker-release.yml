name: 🐋 Docker Release 🗞️
# This workflow is designed to build a Docker image, upload it to Docker Hub,
# and create a GitHub release with the image tar file every time there's a commit
# on branches other than 'main'.
on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch to pull from"
        required: false

  pull_request: 
    types: closed
    branches:
      - "!main"
      - "releases/**"
    paths-ignore: [ "./github" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    if: github.event.pull_request.merged == true
    outputs:
      image_tag: ${{ steps.set_image_tag.outputs.IMAGE_TAG }}
      ref: ${{ steps.set_ref.outputs.ref }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine ref
        id: set_ref
        run: |
          if [[ ${{ github.event.inputs.ref }} ]]; then
            echo "ref=${{ github.event.inputs.ref }}" >> $GITHUB_OUTPUT
          else
            echo "ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.set_ref.outputs.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWD }}

      - name: Determine IMAGE_TAG
        id: set_image_tag
        run: |
          if [[ ${{ github.event.inputs.tag }} ]]; then
            echo "IMAGE_TAG=${{ github.event.inputs.ref }}_RC-${sha}" >> $GITHUB_OUTPUT
          else
            sha=$(git rev-parse --short HEAD)
            echo "IMAGE_TAG=${{ steps.set_ref.outputs.ref }}_RC-${sha}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.set_image_tag.outputs.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
